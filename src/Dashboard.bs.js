// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var Util$ReactHooksTemplate = require("./Util.bs.js");
var NewBoard$ReactHooksTemplate = require("./NewBoard.bs.js");

var ppx_printed_query = "query getAllBoards  {\nboards  {\nname  \nid  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "boards");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeArray(value$1);
        tmp = match$3 !== undefined ? match$3.map((function (value) {
                  var match = Js_json.decodeNull(value);
                  if (match !== undefined) {
                    return undefined;
                  } else {
                    var match$1 = Js_json.decodeObject(value);
                    var tmp;
                    if (match$1 !== undefined) {
                      var value$1 = Caml_option.valFromOption(match$1);
                      var match$2 = Js_dict.get(value$1, "name");
                      var tmp$1;
                      if (match$2 !== undefined) {
                        var value$2 = Caml_option.valFromOption(match$2);
                        var match$3 = Js_json.decodeString(value$2);
                        tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                      } else {
                        tmp$1 = Js_exn.raiseError("graphql_ppx: Field name on type Board is missing");
                      }
                      var match$4 = Js_dict.get(value$1, "id");
                      var tmp$2;
                      if (match$4 !== undefined) {
                        var value$3 = Caml_option.valFromOption(match$4);
                        var match$5 = Js_json.decodeString(value$3);
                        tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                      } else {
                        tmp$2 = Js_exn.raiseError("graphql_ppx: Field id on type Board is missing");
                      }
                      tmp = {
                        name: tmp$1,
                        id: tmp$2
                      };
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                    }
                    return Caml_option.some(tmp);
                  }
                })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$1));
      }
    } else {
      tmp = undefined;
    }
    return {
            boards: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var Boards = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var BoardsQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

function boardName(board) {
  return React.createElement("div", undefined, board.name);
}

function Dashboard(Props) {
  var match = React.useReducer((function (state, action) {
          return /* record */[/* isCreatingBoard */!state[/* isCreatingBoard */0]];
        }), /* record */[/* isCreatingBoard */false]);
  var dispatch = match[1];
  var state = match[0];
  return React.createElement(BoardsQuery[/* make */4], {
              children: (function (param) {
                  var result = param[/* result */0];
                  var match = state[/* isCreatingBoard */0];
                  var tmp;
                  if (typeof result === "number") {
                    tmp = Util$ReactHooksTemplate.ste("Loading");
                  } else if (result.tag) {
                    var match$1 = result[0].boards;
                    tmp = React.createElement("div", undefined, match$1 !== undefined ? React.createElement("div", undefined, $$Array.map((function (board) {
                                      if (board !== undefined) {
                                        var board$1 = Caml_option.valFromOption(board);
                                        return React.createElement("div", {
                                                    key: board$1.id
                                                  }, React.createElement("a", {
                                                        href: "board/" + board$1.id
                                                      }, Util$ReactHooksTemplate.ste(board$1.name)));
                                      } else {
                                        return Util$ReactHooksTemplate.ste("");
                                      }
                                    }), match$1)) : Util$ReactHooksTemplate.ste("Empty"));
                  } else {
                    tmp = Util$ReactHooksTemplate.ste(result[0].message);
                  }
                  return React.createElement("div", undefined, React.createElement("h1", undefined, Util$ReactHooksTemplate.ste("Dashboard")), React.createElement("button", {
                                  onClick: (function ($$event) {
                                      $$event.preventDefault();
                                      return Curry._1(dispatch, /* ToggleNewBoardForm */0);
                                    })
                                }, Util$ReactHooksTemplate.ste("New board")), match ? React.createElement(NewBoard$ReactHooksTemplate.make, { }) : null, tmp);
                })
            });
}

var make$1 = Dashboard;

exports.Boards = Boards;
exports.BoardsQuery = BoardsQuery;
exports.boardName = boardName;
exports.make = make$1;
/* BoardsQuery Not a pure module */
