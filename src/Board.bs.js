// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var Util$ReactHooksTemplate = require("./Util.bs.js");
var Sections$ReactHooksTemplate = require("./Sections.bs.js");

var ppx_printed_query = "query Board($id: ID!)  {\nboard(id: $id)  {\nname  \nmaxVotes  \nsections  {\nname  \nid  \ncards  {\nid  \ntext  \nvotes  {\nfirstName  \n}\n\ncomments  {\nid  \ntext  \nauthor  {\nid  \nfirstName  \nlastName  \n}\n\n}\n\n}\n\n}\n\n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "board");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(value$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var value$2 = Caml_option.valFromOption(match$3);
          var match$4 = Js_dict.get(value$2, "name");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$3 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeString(value$3);
            tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
          } else {
            tmp$2 = Js_exn.raiseError("graphql_ppx: Field name on type Board is missing");
          }
          var match$6 = Js_dict.get(value$2, "maxVotes");
          var tmp$3;
          if (match$6 !== undefined) {
            var value$4 = Caml_option.valFromOption(match$6);
            var match$7 = Js_json.decodeNumber(value$4);
            tmp$3 = match$7 !== undefined ? match$7 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$4));
          } else {
            tmp$3 = Js_exn.raiseError("graphql_ppx: Field maxVotes on type Board is missing");
          }
          var match$8 = Js_dict.get(value$2, "sections");
          var tmp$4;
          if (match$8 !== undefined) {
            var value$5 = Caml_option.valFromOption(match$8);
            var match$9 = Js_json.decodeNull(value$5);
            if (match$9 !== undefined) {
              tmp$4 = undefined;
            } else {
              var match$10 = Js_json.decodeArray(value$5);
              tmp$4 = match$10 !== undefined ? match$10.map((function (value) {
                        var match = Js_json.decodeNull(value);
                        if (match !== undefined) {
                          return undefined;
                        } else {
                          var match$1 = Js_json.decodeObject(value);
                          var tmp;
                          if (match$1 !== undefined) {
                            var value$1 = Caml_option.valFromOption(match$1);
                            var match$2 = Js_dict.get(value$1, "name");
                            var tmp$1;
                            if (match$2 !== undefined) {
                              var value$2 = Caml_option.valFromOption(match$2);
                              var match$3 = Js_json.decodeString(value$2);
                              tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                            } else {
                              tmp$1 = Js_exn.raiseError("graphql_ppx: Field name on type Section is missing");
                            }
                            var match$4 = Js_dict.get(value$1, "id");
                            var tmp$2;
                            if (match$4 !== undefined) {
                              var value$3 = Caml_option.valFromOption(match$4);
                              var match$5 = Js_json.decodeString(value$3);
                              tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                            } else {
                              tmp$2 = Js_exn.raiseError("graphql_ppx: Field id on type Section is missing");
                            }
                            var match$6 = Js_dict.get(value$1, "cards");
                            var tmp$3;
                            if (match$6 !== undefined) {
                              var value$4 = Caml_option.valFromOption(match$6);
                              var match$7 = Js_json.decodeNull(value$4);
                              if (match$7 !== undefined) {
                                tmp$3 = undefined;
                              } else {
                                var match$8 = Js_json.decodeArray(value$4);
                                tmp$3 = match$8 !== undefined ? match$8.map((function (value) {
                                          var match = Js_json.decodeNull(value);
                                          if (match !== undefined) {
                                            return undefined;
                                          } else {
                                            var match$1 = Js_json.decodeObject(value);
                                            var tmp;
                                            if (match$1 !== undefined) {
                                              var value$1 = Caml_option.valFromOption(match$1);
                                              var match$2 = Js_dict.get(value$1, "id");
                                              var tmp$1;
                                              if (match$2 !== undefined) {
                                                var value$2 = Caml_option.valFromOption(match$2);
                                                var match$3 = Js_json.decodeString(value$2);
                                                tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                                              } else {
                                                tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Card is missing");
                                              }
                                              var match$4 = Js_dict.get(value$1, "text");
                                              var tmp$2;
                                              if (match$4 !== undefined) {
                                                var value$3 = Caml_option.valFromOption(match$4);
                                                var match$5 = Js_json.decodeString(value$3);
                                                tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                                              } else {
                                                tmp$2 = Js_exn.raiseError("graphql_ppx: Field text on type Card is missing");
                                              }
                                              var match$6 = Js_dict.get(value$1, "votes");
                                              var tmp$3;
                                              if (match$6 !== undefined) {
                                                var value$4 = Caml_option.valFromOption(match$6);
                                                var match$7 = Js_json.decodeNull(value$4);
                                                if (match$7 !== undefined) {
                                                  tmp$3 = undefined;
                                                } else {
                                                  var match$8 = Js_json.decodeArray(value$4);
                                                  tmp$3 = match$8 !== undefined ? match$8.map((function (value) {
                                                            var match = Js_json.decodeNull(value);
                                                            if (match !== undefined) {
                                                              return undefined;
                                                            } else {
                                                              var match$1 = Js_json.decodeObject(value);
                                                              var tmp;
                                                              if (match$1 !== undefined) {
                                                                var match$2 = Js_dict.get(Caml_option.valFromOption(match$1), "firstName");
                                                                var tmp$1;
                                                                if (match$2 !== undefined) {
                                                                  var value$1 = Caml_option.valFromOption(match$2);
                                                                  var match$3 = Js_json.decodeString(value$1);
                                                                  tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$1));
                                                                } else {
                                                                  tmp$1 = Js_exn.raiseError("graphql_ppx: Field firstName on type User is missing");
                                                                }
                                                                tmp = {
                                                                  firstName: tmp$1
                                                                };
                                                              } else {
                                                                tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                                                              }
                                                              return Caml_option.some(tmp);
                                                            }
                                                          })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$4));
                                                }
                                              } else {
                                                tmp$3 = undefined;
                                              }
                                              var match$9 = Js_dict.get(value$1, "comments");
                                              var tmp$4;
                                              if (match$9 !== undefined) {
                                                var value$5 = Caml_option.valFromOption(match$9);
                                                var match$10 = Js_json.decodeNull(value$5);
                                                if (match$10 !== undefined) {
                                                  tmp$4 = undefined;
                                                } else {
                                                  var match$11 = Js_json.decodeArray(value$5);
                                                  tmp$4 = match$11 !== undefined ? match$11.map((function (value) {
                                                            var match = Js_json.decodeNull(value);
                                                            if (match !== undefined) {
                                                              return undefined;
                                                            } else {
                                                              var match$1 = Js_json.decodeObject(value);
                                                              var tmp;
                                                              if (match$1 !== undefined) {
                                                                var value$1 = Caml_option.valFromOption(match$1);
                                                                var match$2 = Js_dict.get(value$1, "id");
                                                                var tmp$1;
                                                                if (match$2 !== undefined) {
                                                                  var value$2 = Caml_option.valFromOption(match$2);
                                                                  var match$3 = Js_json.decodeString(value$2);
                                                                  tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                                                                } else {
                                                                  tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Comment is missing");
                                                                }
                                                                var match$4 = Js_dict.get(value$1, "text");
                                                                var tmp$2;
                                                                if (match$4 !== undefined) {
                                                                  var value$3 = Caml_option.valFromOption(match$4);
                                                                  var match$5 = Js_json.decodeString(value$3);
                                                                  tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                                                                } else {
                                                                  tmp$2 = Js_exn.raiseError("graphql_ppx: Field text on type Comment is missing");
                                                                }
                                                                var match$6 = Js_dict.get(value$1, "author");
                                                                var tmp$3;
                                                                if (match$6 !== undefined) {
                                                                  var match$7 = Js_json.decodeObject(Caml_option.valFromOption(match$6));
                                                                  if (match$7 !== undefined) {
                                                                    var value$4 = Caml_option.valFromOption(match$7);
                                                                    var match$8 = Js_dict.get(value$4, "id");
                                                                    var tmp$4;
                                                                    if (match$8 !== undefined) {
                                                                      var value$5 = Caml_option.valFromOption(match$8);
                                                                      var match$9 = Js_json.decodeString(value$5);
                                                                      tmp$4 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
                                                                    } else {
                                                                      tmp$4 = Js_exn.raiseError("graphql_ppx: Field id on type User is missing");
                                                                    }
                                                                    var match$10 = Js_dict.get(value$4, "firstName");
                                                                    var tmp$5;
                                                                    if (match$10 !== undefined) {
                                                                      var value$6 = Caml_option.valFromOption(match$10);
                                                                      var match$11 = Js_json.decodeString(value$6);
                                                                      tmp$5 = match$11 !== undefined ? match$11 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
                                                                    } else {
                                                                      tmp$5 = Js_exn.raiseError("graphql_ppx: Field firstName on type User is missing");
                                                                    }
                                                                    var match$12 = Js_dict.get(value$4, "lastName");
                                                                    var tmp$6;
                                                                    if (match$12 !== undefined) {
                                                                      var value$7 = Caml_option.valFromOption(match$12);
                                                                      var match$13 = Js_json.decodeString(value$7);
                                                                      tmp$6 = match$13 !== undefined ? match$13 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
                                                                    } else {
                                                                      tmp$6 = Js_exn.raiseError("graphql_ppx: Field lastName on type User is missing");
                                                                    }
                                                                    tmp$3 = {
                                                                      id: tmp$4,
                                                                      firstName: tmp$5,
                                                                      lastName: tmp$6
                                                                    };
                                                                  } else {
                                                                    tmp$3 = Js_exn.raiseError("graphql_ppx: Object is not a value");
                                                                  }
                                                                } else {
                                                                  tmp$3 = Js_exn.raiseError("graphql_ppx: Field author on type Comment is missing");
                                                                }
                                                                tmp = {
                                                                  id: tmp$1,
                                                                  text: tmp$2,
                                                                  author: tmp$3
                                                                };
                                                              } else {
                                                                tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                                                              }
                                                              return Caml_option.some(tmp);
                                                            }
                                                          })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$5));
                                                }
                                              } else {
                                                tmp$4 = undefined;
                                              }
                                              tmp = {
                                                id: tmp$1,
                                                text: tmp$2,
                                                votes: tmp$3,
                                                comments: tmp$4
                                              };
                                            } else {
                                              tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                                            }
                                            return Caml_option.some(tmp);
                                          }
                                        })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$4));
                              }
                            } else {
                              tmp$3 = undefined;
                            }
                            tmp = {
                              name: tmp$1,
                              id: tmp$2,
                              cards: tmp$3
                            };
                          } else {
                            tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                          }
                          return Caml_option.some(tmp);
                        }
                      })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$5));
            }
          } else {
            tmp$4 = undefined;
          }
          tmp$1 = {
            name: tmp$2,
            maxVotes: tmp$3,
            sections: tmp$4
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = Caml_option.some(tmp$1);
      }
    } else {
      tmp = undefined;
    }
    return {
            board: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(id, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]]),
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var Board = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var BoardQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

function Board$1(Props) {
  var id = Props.id;
  var query = make(id, /* () */0);
  return React.createElement(BoardQuery[/* make */4], {
              variables: query.variables,
              children: (function (param) {
                  var result = param[/* result */0];
                  var tmp;
                  if (typeof result === "number") {
                    tmp = Util$ReactHooksTemplate.ste("Loading");
                  } else if (result.tag) {
                    var match = result[0].board;
                    var tmp$1;
                    if (match !== undefined) {
                      var board = Caml_option.valFromOption(match);
                      tmp$1 = React.createElement("div", undefined, React.createElement("h1", undefined, Util$ReactHooksTemplate.ste(board.name)), React.createElement("span", undefined, Util$ReactHooksTemplate.ste("Max votes: "), Util$ReactHooksTemplate.ste(String(board.maxVotes))), React.createElement(Sections$ReactHooksTemplate.make, {
                                sections: board.sections,
                                boardId: id
                              }));
                    } else {
                      tmp$1 = Util$ReactHooksTemplate.ste("Not found");
                    }
                    tmp = React.createElement("div", undefined, tmp$1);
                  } else {
                    tmp = Util$ReactHooksTemplate.ste(result[0].message);
                  }
                  return React.createElement("div", undefined, tmp);
                })
            });
}

var make$1 = Board$1;

exports.Board = Board;
exports.BoardQuery = BoardQuery;
exports.make = make$1;
/* BoardQuery Not a pure module */
