// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var Util$ReactHooksTemplate = require("./Util.bs.js");

var ppx_printed_query = "mutation CreateCard($text: String!, $sectionId: ID!)  {\ncreateCard(text: $text, sectionId: $sectionId)  {\ntext  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "createCard");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(value$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var match$4 = Js_dict.get(Caml_option.valFromOption(match$3), "text");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$2 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeString(value$2);
            tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
          } else {
            tmp$2 = Js_exn.raiseError("graphql_ppx: Field text on type Card is missing");
          }
          tmp$1 = {
            text: tmp$2
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = Caml_option.some(tmp$1);
      }
    } else {
      tmp = undefined;
    }
    return {
            createCard: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(text, sectionId, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "text",
                  text
                ],
                /* tuple */[
                  "sectionId",
                  sectionId
                ]
              ]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var text = variables.text;
  var sectionId = variables.sectionId;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "text",
                  text
                ],
                /* tuple */[
                  "sectionId",
                  sectionId
                ]
              ]),
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var NewCard = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var NewCardMutation = ReasonApollo.CreateMutation([
      ppx_printed_query,
      parse
    ]);

function NewCard$1(Props) {
  var sectionId = Props.sectionId;
  var match = React.useReducer((function (_state, action) {
          return /* record */[/* text */action[0]];
        }), /* record */[/* text */""]);
  var dispatch = match[1];
  var state = match[0];
  return React.createElement(NewCardMutation[/* make */6], {
              children: (function (mutation, param) {
                  var tmp;
                  var tmp$1 = param[/* result */0];
                  tmp = typeof tmp$1 === "number" ? (
                      tmp$1 === 0 ? Util$ReactHooksTemplate.ste("Loading") : Util$ReactHooksTemplate.ste("")
                    ) : (
                      tmp$1.tag ? Util$ReactHooksTemplate.ste("Card created successfully") : Util$ReactHooksTemplate.ste("Error")
                    );
                  return React.createElement("div", undefined, React.createElement("span", undefined, tmp), React.createElement("form", {
                                  onSubmit: (function ($$event) {
                                      $$event.preventDefault();
                                      var newCard = make(state[/* text */0], sectionId, /* () */0);
                                      Curry._4(mutation, Caml_option.some(newCard.variables), undefined, undefined, /* () */0);
                                      return /* () */0;
                                    })
                                }, React.createElement("div", undefined, React.createElement("textarea", {
                                          placeholder: "Name",
                                          value: state[/* text */0],
                                          onChange: (function (e) {
                                              return Curry._1(dispatch, /* Text */[e.target.value]);
                                            })
                                        })), React.createElement("button", {
                                      type: "submit"
                                    }, Util$ReactHooksTemplate.ste("Create card"))));
                })
            });
}

var make$1 = NewCard$1;

exports.NewCard = NewCard;
exports.NewCardMutation = NewCardMutation;
exports.make = make$1;
/* NewCardMutation Not a pure module */
