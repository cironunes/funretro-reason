// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var ReasonReactRouter = require("reason-react/src/ReasonReactRouter.js");
var Util$ReactHooksTemplate = require("./Util.bs.js");

var ppx_printed_query = "mutation Login($email: String!, $password: String!)  {\nlogin(email: $email, password: $password)  {\nfirstName  \nlastName  \nid  \nemail  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "login");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(value$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var value$2 = Caml_option.valFromOption(match$3);
          var match$4 = Js_dict.get(value$2, "firstName");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$3 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeString(value$3);
            tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
          } else {
            tmp$2 = Js_exn.raiseError("graphql_ppx: Field firstName on type User is missing");
          }
          var match$6 = Js_dict.get(value$2, "lastName");
          var tmp$3;
          if (match$6 !== undefined) {
            var value$4 = Caml_option.valFromOption(match$6);
            var match$7 = Js_json.decodeString(value$4);
            tmp$3 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
          } else {
            tmp$3 = Js_exn.raiseError("graphql_ppx: Field lastName on type User is missing");
          }
          var match$8 = Js_dict.get(value$2, "id");
          var tmp$4;
          if (match$8 !== undefined) {
            var value$5 = Caml_option.valFromOption(match$8);
            var match$9 = Js_json.decodeString(value$5);
            tmp$4 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
          } else {
            tmp$4 = Js_exn.raiseError("graphql_ppx: Field id on type User is missing");
          }
          var match$10 = Js_dict.get(value$2, "email");
          var tmp$5;
          if (match$10 !== undefined) {
            var value$6 = Caml_option.valFromOption(match$10);
            var match$11 = Js_json.decodeString(value$6);
            tmp$5 = match$11 !== undefined ? match$11 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
          } else {
            tmp$5 = Js_exn.raiseError("graphql_ppx: Field email on type User is missing");
          }
          tmp$1 = {
            firstName: tmp$2,
            lastName: tmp$3,
            id: tmp$4,
            email: tmp$5
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = Caml_option.some(tmp$1);
      }
    } else {
      tmp = undefined;
    }
    return {
            login: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(email, password, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "email",
                  email
                ],
                /* tuple */[
                  "password",
                  password
                ]
              ]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var email = variables.email;
  var password = variables.password;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "email",
                  email
                ],
                /* tuple */[
                  "password",
                  password
                ]
              ]),
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var Login = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var LoginMutation = ReasonApollo.CreateMutation([
      ppx_printed_query,
      parse
    ]);

function Login$1(Props) {
  var match = React.useReducer((function (state, action) {
          if (action.tag) {
            return /* record */[
                    /* email */state[/* email */0],
                    /* password */action[0]
                  ];
          } else {
            return /* record */[
                    /* email */action[0],
                    /* password */state[/* password */1]
                  ];
          }
        }), /* record */[
        /* email */"",
        /* password */""
      ]);
  var dispatch = match[1];
  var state = match[0];
  return React.createElement(LoginMutation[/* make */6], {
              onCompleted: (function (param) {
                  return ReasonReactRouter.push("dashboard");
                }),
              children: (function (mutation, param) {
                  var tmp;
                  var tmp$1 = param[/* result */0];
                  tmp = typeof tmp$1 === "number" ? (
                      tmp$1 === 0 ? Util$ReactHooksTemplate.ste("Loading") : Util$ReactHooksTemplate.ste("")
                    ) : (
                      tmp$1.tag ? Util$ReactHooksTemplate.ste("Logged in successfully") : Util$ReactHooksTemplate.ste("Invalid email/password combination. Please try again")
                    );
                  return React.createElement("div", undefined, React.createElement("span", undefined, tmp), React.createElement("form", {
                                  onSubmit: (function ($$event) {
                                      $$event.preventDefault();
                                      var login = make(state[/* email */0], state[/* password */1], /* () */0);
                                      Curry._4(mutation, Caml_option.some(login.variables), undefined, undefined, /* () */0);
                                      return /* () */0;
                                    })
                                }, React.createElement("div", undefined, React.createElement("label", undefined, Util$ReactHooksTemplate.ste("Email")), React.createElement("input", {
                                          placeholder: "Email",
                                          type: "text",
                                          onChange: (function (e) {
                                              return Curry._1(dispatch, /* Email */Block.__(0, [e.target.value]));
                                            })
                                        })), React.createElement("div", undefined, React.createElement("label", undefined, Util$ReactHooksTemplate.ste("Password")), React.createElement("input", {
                                          placeholder: "Password",
                                          type: "password",
                                          onChange: (function (e) {
                                              return Curry._1(dispatch, /* Password */Block.__(1, [e.target.value]));
                                            })
                                        })), React.createElement("button", {
                                      type: "submit"
                                    }, Util$ReactHooksTemplate.ste("Login"))));
                })
            });
}

var make$1 = Login$1;

exports.Login = Login;
exports.LoginMutation = LoginMutation;
exports.make = make$1;
/* LoginMutation Not a pure module */
